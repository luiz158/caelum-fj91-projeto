Config: haproxy (sticky), 2 tomcats (guarda session local em memoria) e memcached para backup da sessao 

Motivacao: Nao sobrecarregar o banco relacionar e nao abusar o banco para backup do session state. Tambem melhorar o desempenho da aplicacao (no caso de backup sincrono)


* alta-diponibilidade e bastante confiavel, escalavel (linear)
* desempenho  igual com serverstate-session
Obs: deve funcionar tambem com non-sticky

	 haproxy (8080)
	 /            \
 tomcat1 (8081)   tomcat2 (8082)    
               \ /
                x   
               / \    
  memcached (n1)     memcached (n2)
     (11211)         (11212)        

-> ordem para iniciar 2x memcached, 2x tomcat
-> precisa ter instalado memcached: apt-get install memcached

Para rodar:
-> na pasta do haproxy:
 ./run-haproxy-sticky.sh
 
 ./run-tomcat1.sh
 ./run-tomcat2.sh

 ./run-memcached1.sh
 ./run-memcached2.sh


Deve aparecer:
 MSG: INFO: MemcachedSessionService finished initialization, sticky true, with node ids [n1] and failover node ids [n2]


Sugestao para rodar

1. Haproxy com sticky
2. rodar memcached um em cada console
3. rodar tomcats um em cada console
4. acessa a aplicacao e adiciona um livro no carrinho
4.1 verifique qual tomcat respondeu e qual memcached recebeu o backup
4.2 verifique tambem o cookie JSESSIONID que possui um prefixo e sufixo 
5. mata o tomcat que respondeu
5.1 tenta alterar o carrinho, outro tomcat recupera a sessao do memcached
6. mata o memcached responsavel
6.1 outro memcached recebe o bkp
6.2 verifique cookie, deve ter mudado
6.3 mostra o context.xml
7. inicia o tomcat e memcached novamente


Obs Tomcats:
 * cada tomcat possui uma config do contexto na pasta conf/context.xml
 * config define:
 ** MemcachedBackupSessionManager (para gravar os dados no memcached)
 ** JavaSerializationTranscoderFactory (usa serializacao padrao, existem alternativas como xstream)
 ** memcachedNodes e failoverNodes
 * os jars do SessionManager estao na pasta lib 
(memcached-session-manager-1.5.1.jar, memcached-session-manager-tc6-1.5.1.jar)
 * jar do memcached no lib (memcached-2.2.4.jar)
 * memcached instances nao se conhecem, backup é feito atraves do session manager

Do context.xml

    <!-- sessao é gravado na memoria do tomcat e um backup é gravado no n2 -->
    <!-- n1 eh failover apenas (nada é replicado entre nodes do memcached) -->
    <!-- n1 e n2 nao se conhecem, mas o SessionManager conhece :) -->
    <!-- caso que n2 falha, tomcat grava session state no n1 -->
    <!-- caso que tomcat falha, sessao será recuperado pelo outro tomcat (n2 faz parte do cookie) -->
    <Manager pathname="/projeto-jsf" className="de.javakaffee.web.msm.MemcachedBackupSessionManager"
	    memcachedNodes="n1:localhost:11211 n2:localhost:11212"
	    failoverNodes="n1"
	    requestUriIgnorePattern=".*\.(png|gif|jpg|css|js)\.cfm$"
	    sessionBackupAsync="false"
	    sessionBackupTimeout="180"
            copyCollectionsForSerialization="false"
            transcoderFactoryClass="de.javakaffee.web.msm.JavaSerializationTranscoderFactory"
    />
